#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sys
import time
import signal
from arkady.speech_recognition import SpeechRecognizer
from arkady.speech_synthesis import HoboVoiceSynthesizer
from arkady.text_generation import ArkadyAI

class ArkadyBot:
    def __init__(self, swear_level='medium'):
        self.running = False
        self.speech_recognizer = None
        self.voice_synthesizer = None
        self.ai_brain = None
        self.swear_level = swear_level
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ Ctrl+C
        signal.signal(signal.SIGINT, self.signal_handler)
        
    def signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        print("\n–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        self.shutdown()
        sys.exit(0)
    
    def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        print("ü§ñ –ó–∞–ø—É—Å–∫ –ê—Ä–∫–∞–¥–∏—è...")
        print("=" * 50)
        
        try:
            # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ò–ò
            print("1Ô∏è‚É£  –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –º–æ–∑–≥–∞–º...")
            self.ai_brain = ArkadyAI(swear_intensity=self.swear_level)
            
            # 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏
            print("2Ô∏è‚É£  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä—É—Å—Å–∫–æ–≥–æ –≥–æ–ª–æ—Å–∞...")
            self.voice_synthesizer = HoboVoiceSynthesizer()
            
            # 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏
            print("3Ô∏è‚É£  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—Ö–∞...")
            self.speech_recognizer = SpeechRecognizer()
            
            print("=" * 50)
            print("‚úÖ –ê—Ä–∫–∞–¥–∏–π –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    def test_components(self):
        """–¢–µ—Å—Ç –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
        
        # –¢–µ—Å—Ç –≥–æ–ª–æ—Å–∞
        print("–¢–µ—Å—Ç –≥–æ–ª–æ—Å–∞...")
        greeting = self.ai_brain.get_greeting()
        self.voice_synthesizer.speak_sync(greeting)
        
        input("–ù–∞–∂–º–∏—Ç–µ Enter —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å...")
        return True
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        if not self.initialize():
            return
        
        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç
        user_choice = input("–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã? (y/n): ").lower()
        if user_choice in ['y', 'yes', '–¥–∞', '–¥']:
            if not self.test_components():
                return
        
        # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
        self.running = True
        self.main_loop()
    
    def main_loop(self):
        """–ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è"""
        print("\n" + "=" * 50)
        print("üé§ –ê—Ä–∫–∞–¥–∏–π —Å–ª—É—à–∞–µ—Ç...")
        print("–°–∫–∞–∂–∏—Ç–µ '–ê—Ä–∫–∞–¥–∏–π' —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å")
        print("–î–ª—è –≤—ã—Ö–æ–¥–∞ —Å–∫–∞–∂–∏—Ç–µ '–ø–æ–∫–∞' –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        print("=" * 50)
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        greeting = self.ai_brain.get_greeting()
        self.voice_synthesizer.speak(greeting)
        
        # –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
        self.speech_recognizer.start_listening()
        
        try:
            while self.running:
                # –ñ–¥–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –∏ –∫–æ–º–∞–Ω–¥—É
                user_command = self.speech_recognizer.wait_for_wake_word(timeout=30)
                
                if user_command:
                    print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_command}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
                    special_response, should_exit = self.ai_brain.handle_special_commands(user_command)
                    
                    if special_response:
                        self.voice_synthesizer.speak(special_response)
                        
                        if should_exit:
                            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                            break
                    else:
                        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç
                        response = self.ai_brain.generate_response(user_command)
                        self.voice_synthesizer.speak(response)
                
                else:
                    # –¢–∞–π–º–∞—É—Ç - –Ω–∞–ø–æ–º–∏–Ω–∞–µ–º –æ —Å–µ–±–µ
                    if self.running:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ –∑–∞–≤–µ—Ä—à–∞–µ–º—Å—è
                        reminders = [
                            "–Ø —Ç—É—Ç, –±—Ä–∞—Ç–æ–∫",
                            "–°–ª—É—à–∞—é —Ç–µ–±—è, –¥–æ—Ä–æ–≥—É—à–∞", 
                            "–ì–æ–≤–æ—Ä–∏, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Å—è",
                            "–ß–µ –º–æ–ª—á–∏—à—å?"
                        ]
                        import random
                        reminder = random.choice(reminders)
                        self.voice_synthesizer.speak(reminder)
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
                time.sleep(0.1)
                
        except KeyboardInterrupt:
            print("\n–ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
        finally:
            self.shutdown()
    
    def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
        print("üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        
        self.running = False
        
        if self.speech_recognizer:
            self.speech_recognizer.cleanup()
        
        if self.voice_synthesizer:
            self.voice_synthesizer.cleanup()
        
        print("‚úÖ –ê—Ä–∫–∞–¥–∏–π –æ—Ç–∫–ª—é—á–µ–Ω")

def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞ '–ê—Ä–∫–∞–¥–∏–π'")
    print("–í–µ—Ä—Å–∏—è: 2.0 (–†—É—Å—Å–∫–∏–π –ë–æ–º–∂–∞—Ä–∞ Edition)")
    print()
    
    # –í—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è –º–∞—Ç–æ–≤
    print("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –º–∞—Ç–∞:")
    print("1. –õ–µ–≥–∫–∏–π (—Ö—Ä–µ–Ω, —á–µ—Ä—Ç, –¥–µ—Ä—å–º–æ)")
    print("2. –°—Ä–µ–¥–Ω–∏–π (–±–∞–∑–æ–≤—ã–π –Ω–∞–±–æ—Ä)")
    print("3. –ñ–µ—Å—Ç–∫–∏–π (–≤—Å–µ –º–∞—Ç—ã)")
    
    while True:
        choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-3) –∏–ª–∏ Enter –¥–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ: ").strip()
        
        if choice == '1':
            swear_level = 'light'
            break
        elif choice == '2' or choice == '':
            swear_level = 'medium'
            break
        elif choice == '3':
            swear_level = 'hardcore'
            break
        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
    
    print(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏: –†—É—Å—Å–∫–∏–π TTS, –ú–∞—Ç—ã={swear_level}")
    
    bot = ArkadyBot(swear_level=swear_level)
    bot.run()

if __name__ == "__main__":
    main()