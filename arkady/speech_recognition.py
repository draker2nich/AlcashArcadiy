import json
import pyaudio
import vosk
import threading
import queue
import time

class SpeechRecognizer:
    def __init__(self, model_path="models/vosk-model-small-ru-0.22"):
        self.model_path = model_path
        self.model = None
        self.recognizer = None
        self.microphone = None
        self.audio_queue = queue.Queue()
        self.is_listening = False
        self.wake_words = ["–∞—Ä–∫–∞–¥–∏–π", "–∞—Ä–∫–∞—à–∞", "–∞—Ä–∫"]
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É–¥–∏–æ
        self.RATE = 16000
        self.CHUNK = 8000
        self.CHANNELS = 1
        
        self.setup_vosk()
        self.setup_microphone()
    
    def setup_vosk(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Vosk"""
        try:
            print(f"–ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –∏–∑ {self.model_path}...")
            self.model = vosk.Model(self.model_path)
            self.recognizer = vosk.KaldiRecognizer(self.model, self.RATE)
            print("‚úì Vosk –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        except Exception as e:
            print(f"‚úó –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Vosk: {e}")
            raise
    
    def setup_microphone(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞"""
        try:
            self.microphone = pyaudio.PyAudio()
            print("‚úì –ú–∏–∫—Ä–æ—Ñ–æ–Ω –≥–æ—Ç–æ–≤")
        except Exception as e:
            print(f"‚úó –û—à–∏–±–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞: {e}")
            raise
    
    def start_listening(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        if self.is_listening:
            return
        
        self.is_listening = True
        self.listen_thread = threading.Thread(target=self._listen_loop)
        self.listen_thread.daemon = True
        self.listen_thread.start()
        print("üé§ –ù–∞—á–∏–Ω–∞—é —Å–ª—É—à–∞—Ç—å...")
    
    def stop_listening(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è"""
        self.is_listening = False
        if hasattr(self, 'listen_thread'):
            self.listen_thread.join(timeout=1)
        print("üîá –ü—Ä–µ–∫—Ä–∞—Ç–∏–ª —Å–ª—É—à–∞—Ç—å")
    
    def _listen_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è"""
        stream = self.microphone.open(
            format=pyaudio.paInt16,
            channels=self.CHANNELS,
            rate=self.RATE,
            input=True,
            frames_per_buffer=self.CHUNK
        )
        
        print("–ì–æ–≤–æ—Ä–∏—Ç–µ '–ê—Ä–∫–∞–¥–∏–π' —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å...")
        
        try:
            while self.is_listening:
                data = stream.read(self.CHUNK, exception_on_overflow=False)
                
                if self.recognizer.AcceptWaveform(data):
                    result = json.loads(self.recognizer.Result())
                    text = result.get('text', '').lower().strip()
                    
                    if text:
                        print(f"–£—Å–ª—ã—à–∞–ª: {text}")
                        self.audio_queue.put(text)
                
                time.sleep(0.01)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è: {e}")
        finally:
            stream.stop_stream()
            stream.close()
    
    def wait_for_wake_word(self, timeout=None):
        """–ñ–¥–µ—Ç –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏"""
        start_time = time.time()
        
        while True:
            if timeout and (time.time() - start_time) > timeout:
                return None
            
            try:
                text = self.audio_queue.get(timeout=1)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ wake word
                for wake_word in self.wake_words:
                    if wake_word in text:
                        print(f"‚úì –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ —Å–ª–æ–≤—É: {wake_word}")
                        return self._listen_for_command()
                        
            except queue.Empty:
                continue
    
    def _listen_for_command(self, timeout=5):
        """–°–ª—É—à–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏"""
        print("–°–ª—É—à–∞—é –∫–æ–º–∞–Ω–¥—É...")
        start_time = time.time()
        command_parts = []
        
        while time.time() - start_time < timeout:
            try:
                text = self.audio_queue.get(timeout=1)
                
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ wake words
                if not any(word in text for word in self.wake_words):
                    command_parts.append(text)
                    print(f"–ö–æ–º–∞–Ω–¥–∞: {text}")
                    
                    # –ï—Å–ª–∏ –ø–∞—É–∑–∞ –±–æ–ª—å—à–µ 2 —Å–µ–∫—É–Ω–¥ - –∫–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
                    pause_start = time.time()
                    while time.time() - pause_start < 2:
                        try:
                            more_text = self.audio_queue.get(timeout=0.5)
                            if not any(word in more_text for word in self.wake_words):
                                command_parts.append(more_text)
                                pause_start = time.time()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –ø–∞—É–∑—ã
                        except queue.Empty:
                            break
                    
                    break
                    
            except queue.Empty:
                continue
        
        command = " ".join(command_parts).strip()
        return command if command else None
    
    def listen_once(self, timeout=10):
        """–û–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã"""
        if not self.is_listening:
            self.start_listening()
        
        return self.wait_for_wake_word(timeout)
    
    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        self.stop_listening()
        if self.microphone:
            self.microphone.terminate()
        print("–†–µ—Å—É—Ä—Å—ã –æ—á–∏—â–µ–Ω—ã")