#!/usr/bin/env python3
"""
–í—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π –≥–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ —Å wake-word –¥–µ—Ç–µ–∫—Ü–∏–µ–π
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞ —Å–ª–∞–±—ã—Ö –ü–ö —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
"""

import queue
import threading
import numpy as np
import sounddevice as sd
import vosk
import json
import sys
from collections import deque
from time import time

class VoiceAssistant:
    def __init__(self, model_path="vosk-model-small-ru-0.22", wake_word="–ø—Ä–∏–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç"):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ Vosk (–ª–µ–≥–∫–æ–≤–µ—Å–Ω–∞—è, —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ñ—Ñ–ª–∞–π–Ω)
        self.model = vosk.Model(model_path)
        self.wake_word = wake_word.lower()
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞—É–¥–∏–æ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –±–∞–ª–∞–Ω—Å–∞ –∫–∞—á–µ—Å—Ç–≤–æ/–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å)
        self.sample_rate = 16000  # –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        self.block_size = 512     # –ú–∞–ª—ã–π —Ä–∞–∑–º–µ—Ä –±–ª–æ–∫–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–∫–ª–∏–∫–∞
        self.channels = 1
        
        # –û—á–µ—Ä–µ–¥—å –∞—É–¥–∏–æ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
        self.audio_queue = queue.Queue(maxsize=100)
        
        # –ë—É—Ñ–µ—Ä –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ wake-word (3 —Å–µ–∫—É–Ω–¥—ã)
        self.wake_buffer = deque(maxlen=int(3 * self.sample_rate / self.block_size))
        self.is_listening = False
        
        # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª–∏
        self.wake_rec = vosk.KaldiRecognizer(self.model, self.sample_rate)
        self.main_rec = vosk.KaldiRecognizer(self.model, self.sample_rate)
        
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –æ—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ Vosk –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        vosk.SetLogLevel(-1)
        
    def audio_callback(self, indata, frames, time_info, status):
        """Callback –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ –∞—É–¥–∏–æ (–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ)"""
        if status:
            print(f"–û—à–∏–±–∫–∞ –∞—É–¥–∏–æ: {status}", file=sys.stderr)
        
        # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –æ—á–µ—Ä–µ–¥—å –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        try:
            self.audio_queue.put_nowait(indata.copy())
        except queue.Full:
            pass  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–∞–¥—Ä –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–∏
    
    def process_audio(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ"""
        while True:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∞—É–¥–∏–æ —Å —Ç–∞–π–º–∞—É—Ç–æ–º –¥–ª—è –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç–∏
                audio_chunk = self.audio_queue.get(timeout=0.1)
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ bytes –¥–ª—è Vosk
                audio_bytes = (audio_chunk * 32768).astype(np.int16).tobytes()
                
                if not self.is_listening:
                    # –†–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è wake-word
                    if self.wake_rec.AcceptWaveform(audio_bytes):
                        result = json.loads(self.wake_rec.Result())
                        text = result.get('text', '').lower()
                        
                        if self.wake_word in text:
                            self.is_listening = True
                            print("\nüé§ –°–ª—É—à–∞—é...")
                            # –°–±—Ä–æ—Å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—è
                            self.main_rec = vosk.KaldiRecognizer(self.model, self.sample_rate)
                else:
                    # –†–µ–∂–∏–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
                    if self.main_rec.AcceptWaveform(audio_bytes):
                        result = json.loads(self.main_rec.Result())
                        text = result.get('text', '').strip()
                        
                        if text:
                            print(f"üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {text}")
                            self.process_command(text)
                            self.is_listening = False
                            print("üí§ –ñ–¥—É wake-word...")
                    else:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç–∏
                        partial = json.loads(self.main_rec.PartialResult())
                        if partial.get('partial'):
                            print(f"\rüîÑ {partial['partial']}", end='', flush=True)
                
            except queue.Empty:
                continue
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}", file=sys.stderr)
    
    def process_command(self, text):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã"""
        # –ó–¥–µ—Å—å –¥–æ–±–∞–≤—å—Ç–µ –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥
        if "–≤—Ä–µ–º—è" in text or "–∫–æ—Ç–æ—Ä—ã–π —á–∞—Å" in text:
            from datetime import datetime
            print(f"‚è∞ –°–µ–π—á–∞—Å {datetime.now().strftime('%H:%M')}")
        elif "—Å—Ç–æ–ø" in text or "–≤—ã—Ö–æ–¥" in text:
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            self.stop()
        else:
            print(f"‚ùì –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞: {text}")
    
    def start(self):
        """–ó–∞–ø—É—Å–∫ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞"""
        print(f"üöÄ –ì–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –∑–∞–ø—É—â–µ–Ω")
        print(f"üîä Wake-word: '{self.wake_word}'")
        print(f"üí§ –ñ–¥—É wake-word...")
        
        # –ó–∞–ø—É—Å–∫ –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–∞
        with sd.InputStream(
            samplerate=self.sample_rate,
            blocksize=self.block_size,
            channels=self.channels,
            callback=self.audio_callback,
            dtype=np.float32
        ):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            self.process_audio()
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–º–æ—â–Ω–∏–∫–∞"""
        sys.exit(0)

# –ë—ã—Å—Ç—Ä–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫
if __name__ == "__main__":
    try:
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–º–æ—â–Ω–∏–∫–∞
        assistant = VoiceAssistant(
            model_path="vosk-model-small-ru-0.22",  # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ small –º–æ–¥–µ–ª—å –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
            wake_word="–∞—Ä–∫–∞—à–∞"  # –ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ –ª—é–±–æ–µ —Å–ª–æ–≤–æ
        )
        assistant.start()
        
    except KeyboardInterrupt:
        print("\nüëã –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", file=sys.stderr)
        sys.exit(1)